// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  email   String   @unique
  role    Role     @default(MEMBER)
  info    Info?
  reviews Review[]

  @@map("users")
}

model Info {
  id                        String  @id
  user                      User    @relation(fields: [id], references: [id], onDelete: Cascade)
  hash                      String
  currentHashedRefreshToken String?

  @@map("infos")
}

model Artist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  numericalId Int?    @unique
  name        String
  biography   String
  imageUrl    String? /// append img src to www.progarchives.com/
  country     String  @db.VarChar(40)
  albums      Album[]

  @@map("artists")
}

model Album {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  numericalId  Int?      @unique
  name         String
  releaseYear  Int
  trackListing String
  musicians    String
  albumType    AlbumType
  imageUrl     String?
  reviews      Review[]

  artist   Artist @relation(fields: [artistId], references: [id])
  artistId String
  genre    Genre  @relation(fields: [genreId], references: [id])
  genreId  Int

  @@map("albums")
}

model Genre {
  id        Int      @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  description String
  albums      Album[]

  @@map("genres")
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating Int
  body   String

  user    User   @relation(fields: [userId], references: [id])
  userId  String
  album   Album  @relation(fields: [albumId], references: [id])
  albumId String

  @@map("reviews")
}

enum Role {
  MEMBER
  EDITOR
  ADMIN
}

enum AlbumType {
  STUDIO
  LIVE
}
